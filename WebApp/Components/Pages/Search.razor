@page "/search"
@attribute [StreamRendering(true)]
@rendermode InteractiveServer

@inject CatalogApiClient CatalogApiClient

<PageTitle>Search Products</PageTitle>

<h1>Search Products</h1>

<p>Search our amazing outdoor products that you can purchase.</p>

<div class="form-group">
    <label for="search" class="form-label">Type your question:</label>
    <div class="input-group mb-3">
        <input type="text" id="search" class="form-control" @bind="searchTerm" placeholder="Enter search term..." />
        <button id="btnSearch" class="btn btn-primary" @onclick="SearchProducts" type="submit">Search</button>
    </div>
    <div class="form-check form-switch mb-3">
        <InputCheckbox id="aiSearchCheckBox" @bind-Value="aiSearch" />
        <label class="form-check-label" for="aiSearch">Use Semantic Search</label>
    </div>
    <hr />
</div>

@if (products == null)
{
    <p><em>Loading...</em></p>
}
else if (products.Count == 0)
{
    <p><em>No product found.</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Image</th>
                <th>Name</th>
                <th>Description</th>
                <th>Price</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <!-- Simulating images being hosted on a CDN -->
                    <td><img height="80" width="80" src="https://raw.githubusercontent.com/MicrosoftDocs/mslearn-dotnet-cloudnative/main/dotnet-docker/Products/wwwroot/images/@product.ImageUrl" /></td>
                    <td>@product.Name</td>
                    <td>@product.Description</td>
                    <td>@product.Price.ToString("C2")</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    private string searchTerm = default!;
    private bool aiSearch = false;
    private List<Product>? products = [];

    private async Task SearchProducts(MouseEventArgs e)
    {
        await Task.Delay(500);
        products = await CatalogApiClient.SearchProducts(searchTerm, aiSearch);
    }
}